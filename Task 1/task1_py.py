# -*- coding: utf-8 -*-
"""Task1.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DoDN7wKfYvuqP_s40miVVL6NGGJ-6rSr
"""

import torch
import torch.nn as nn
import torch.optim as optim
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

iris = load_iris()
X, y = iris.data, iris.target

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.2, random_state=42)

X_train_tensor = torch.tensor(X_train, dtype=torch.float32)
y_train_tensor = torch.tensor(y_train, dtype=torch.long)
X_test_tensor = torch.tensor(X_test, dtype=torch.float32)
y_test_tensor = torch.tensor(y_test, dtype=torch.long)

class IrisNet(nn.Module):
    def __init__(self):
        super(IrisNet, self).__init__()
        self.fc1 = nn.Linear(4, 10)
        self.relu = nn.ReLU()
        self.fc2 = nn.Linear(10, 3)

    def forward(self, x):
        x = self.relu(self.fc1(x))
        x = self.fc2(x)
        return x

model = IrisNet()

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.01)

epochs = 50
train_accuracies = []
test_accuracies = []

for epoch in range(epochs):
    # Forward pass
    outputs = model(X_train_tensor)
    loss = criterion(outputs, y_train_tensor)

    # Backward pass
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()

    # Accuracy Calculation
    with torch.no_grad():
        train_preds = torch.argmax(model(X_train_tensor), dim=1)
        test_preds = torch.argmax(model(X_test_tensor), dim=1)

        train_acc = (train_preds == y_train_tensor).float().mean().item()
        test_acc = (test_preds == y_test_tensor).float().mean().item()

        train_accuracies.append(train_acc)
        test_accuracies.append(test_acc)

print(f"Epoch {epoch+1}/{epochs} - Train Acc: {train_acc:.2f} | Test Acc: {test_acc:.2f}")

plt.plot(train_accuracies, label='Train Accuracy')
plt.plot(test_accuracies, label='Test Accuracy')
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.title("Accuracy vs Epoch")
plt.legend()
plt.savefig("accuracy_plot.png")
plt.show()